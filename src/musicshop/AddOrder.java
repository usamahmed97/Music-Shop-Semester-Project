/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package musicshop;

import java.awt.print.PrinterException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import jdk.nashorn.internal.runtime.JSType;

/**
 *
 * @author 123
 */
public class AddOrder extends javax.swing.JFrame {
    

    /**
     * Creates new form AddOrder
     */
    public AddOrder() {
      
        initComponents();
          totalTextfield.setEditable(false);
          CutomerIDTextfield.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        CutomerIDTextfield = new javax.swing.JTextField();
        SelectIDButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        OrderTable = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        RemoveSelectedRows = new javax.swing.JButton();
        total = new javax.swing.JButton();
        totalTextfield = new javax.swing.JTextField();
        ConfirmOrder = new javax.swing.JButton();
        PrintReciept = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Add Order");

        jButton1.setText("<- Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Log out");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("View All Products");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ProductID", "ProductName", "ProductQuantity", "ProductCategory", "ProductPrice", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton4.setText("View Customers");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "CustomerID", "CustomerName", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel2.setText("Enter Customer ID:");

        CutomerIDTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutomerIDTextfieldActionPerformed(evt);
            }
        });

        SelectIDButton.setText("Select ID");
        SelectIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectIDButtonActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "CustomerID", "CustomerName", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        OrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ProductID", "ProductName", "ProductQuantity", "ProductPrice", "QuantityXPrice"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(OrderTable);

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton5.setForeground(new java.awt.Color(204, 204, 0));
        jButton5.setText("Add Selected Product");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        Clear.setBackground(new java.awt.Color(0, 0, 0));
        Clear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Clear.setForeground(new java.awt.Color(255, 153, 0));
        Clear.setText("Clear Ordered Products");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        RemoveSelectedRows.setBackground(new java.awt.Color(0, 0, 0));
        RemoveSelectedRows.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        RemoveSelectedRows.setForeground(new java.awt.Color(255, 0, 0));
        RemoveSelectedRows.setText("Remove Selected Row");
        RemoveSelectedRows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveSelectedRowsActionPerformed(evt);
            }
        });

        total.setBackground(new java.awt.Color(0, 0, 0));
        total.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        total.setForeground(new java.awt.Color(204, 204, 0));
        total.setText("Total:");
        total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalActionPerformed(evt);
            }
        });

        totalTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalTextfieldActionPerformed(evt);
            }
        });

        ConfirmOrder.setBackground(new java.awt.Color(0, 0, 0));
        ConfirmOrder.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        ConfirmOrder.setForeground(new java.awt.Color(255, 153, 0));
        ConfirmOrder.setText("Confirm Order");
        ConfirmOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmOrderActionPerformed(evt);
            }
        });

        PrintReciept.setBackground(new java.awt.Color(0, 0, 0));
        PrintReciept.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        PrintReciept.setForeground(new java.awt.Color(204, 0, 0));
        PrintReciept.setText("Print Reciept");
        PrintReciept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintRecieptActionPerformed(evt);
            }
        });

        jLabel4.setText("Product Name: ");

        jButton6.setText("Search");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(471, 471, 471)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton5)
                                .addGap(358, 358, 358)
                                .addComponent(Clear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RemoveSelectedRows))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 839, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(163, 163, 163)
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton3))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(85, 85, 85)
                                        .addComponent(jButton4))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(6, 6, 6)
                                .addComponent(CutomerIDTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SelectIDButton))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(74, 74, 74))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 726, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ConfirmOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 734, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PrintReciept, javax.swing.GroupLayout.PREFERRED_SIZE, 734, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(198, 198, 198))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(jButton2))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jLabel4)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(CutomerIDTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SelectIDButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Clear)
                        .addComponent(RemoveSelectedRows))
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(total)
                    .addComponent(totalTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(ConfirmOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(PrintReciept, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addGap(101, 101, 101))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        PreparedStatement ps;
        ResultSet rs;
        String query="SELECT * FROM products";

        try {
            ps=MyConnection.getConnection().prepareStatement(query);
            rs=ps.executeQuery();
            DefaultTableModel tm=(DefaultTableModel)jTable1.getModel();
            tm.setRowCount(0);

            while(rs.next())
            {
                Object o[]={rs.getInt("ProductID"), rs.getString("ProductName"), rs.getInt("ProductQuantity"), rs.getString("ProductCategory"), rs.getInt("ProductPrice"), rs.getString("ProductDescription") };
                tm.addRow(o);

            }

        } catch (SQLException ex) {
            Logger.getLogger(AddProduct.class.getName()).log(Level.SEVERE, null, ex);
        }// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        PreparedStatement ps;
        ResultSet rs;
        String query="SELECT * FROM customer";

        try {
            ps=MyConnection.getConnection().prepareStatement(query);
            rs=ps.executeQuery();
            DefaultTableModel tm=(DefaultTableModel)jTable2.getModel();
            tm.setRowCount(0);

            while(rs.next())
            {
                Object o[]={rs.getInt("CustomerID"), rs.getString("CustomerName"), rs.getString("Email")};
                tm.addRow(o);

            }

        } catch (SQLException ex) {
            Logger.getLogger(AddCustomer.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void CutomerIDTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CutomerIDTextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CutomerIDTextfieldActionPerformed

    private void SelectIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectIDButtonActionPerformed
        String CustomerID=CutomerIDTextfield.getText();

        if(CustomerID.equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter values in the missing field(s)");
            return;
        }
        PreparedStatement ps;
        ResultSet rs;

        try {
            String query="SELECT * FROM `customer` WHERE`CustomerID`=?";

            ps=MyConnection.getConnection().prepareStatement(query);
            ps.setString(1, CustomerID);
            rs=ps.executeQuery();
            DefaultTableModel tm=(DefaultTableModel)jTable3.getModel();
            tm.setRowCount(0);

            while(rs.next())
            {
                Object o[]={rs.getInt("CustomerID"), rs.getString("CustomerName"), rs.getString("Email") };
                tm.addRow(o);

            }
           

        } catch (SQLException ex) {
            Logger.getLogger(AddProduct.class.getName()).log(Level.SEVERE, null, ex);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_SelectIDButtonActionPerformed
String q;
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        int a, b;

        q=JOptionPane.showInputDialog(null, "Enter Quantity");
        
         if (!q.equals(""))
        {
int valueOfQ=Integer.parseInt(q);
int valueOfTotalQuantity=Integer.parseInt(TotalQuantity);



if(valueOfTotalQuantity>=valueOfQ)
{
        TableModel model1=jTable1.getModel();
        int cols=jTable1.getColumnCount();
        int rowCount=jTable1.getRowCount();
        int indexs[]=jTable1.getSelectedRows();
        Object[] row=new Object[5];
        DefaultTableModel model2=(DefaultTableModel)OrderTable.getModel();

        for(int i=0; i<indexs.length; i++)
        {

            row[0]= model1.getValueAt(indexs[i], 0);

            row[1]= model1.getValueAt(indexs[i], 1);
            row[2]= q;
            row[3]= model1.getValueAt(indexs[i], 4);
            a=JSType.toInt32(row[2]) ;
            b=JSType.toInt32(row[3]);
            row[4]=a*b;

            model2.addRow(row);

        }
 }
         else
        {
                JOptionPane.showMessageDialog(null, "The entered quantity is more than that is available in stock");
        
        
        }
        }
         else
         {
              JOptionPane.showMessageDialog(null, "Enter a value for Quantity to continue");
         }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed

        OrderTable.setModel(new DefaultTableModel (null, new String[]{"ProductID", "ProductName", "ProductQuantity", "ProductPrice","ProductCategory",  "ProductDescription"}));

        // TODO add your handling code here:
    }//GEN-LAST:event_ClearActionPerformed

    private void RemoveSelectedRowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveSelectedRowsActionPerformed

        DefaultTableModel model= (DefaultTableModel)OrderTable.getModel();

        try{
            int SelectedRowIndex=OrderTable.getSelectedRow();
            model.removeRow(SelectedRowIndex);
        }catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_RemoveSelectedRowsActionPerformed

    private void totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalActionPerformed
        int z=0;
        for(int y=0; y<OrderTable.getRowCount(); y++)
        {
            z+=Integer.parseInt(OrderTable.getValueAt(y, 4).toString());

        }
        totalTextfield.setText(z+".00");

        // TODO add your handling code here:
    }//GEN-LAST:event_totalActionPerformed

    private void totalTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalTextfieldActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_totalTextfieldActionPerformed

    private void ConfirmOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmOrderActionPerformed

        int s;
        int z;
        String CustomerID;
        String total;

        CustomerID=CutomerIDTextfield.getText();
        total=totalTextfield.getText();

        if(CustomerID.equals("") || total.equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter values in the missing field(s)");
            return;
        }

        PreparedStatement ps;
        try {
            String query="INSERT INTO `order`( `CustomerID`, `Total`) VALUES (?, ?)";

            ps=MyConnection.getConnection().prepareStatement(query);
            ps.setString(1, CustomerID);
            ps.setString(2, total);
            if (OrderTable.getRowCount()==0)
            {
               JOptionPane.showMessageDialog(null, "Please insert value in the order table first");
               return;

            }

            if(ps.executeUpdate()>0)
            {
                CutomerIDTextfield.setText("");
                totalTextfield.setText("");
                JOptionPane.showMessageDialog(null, "Order Recorded");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "error");
                return;
            }
            
            
            
              for(int y=0; y<OrderTable.getRowCount(); y++)
  {
      
         PreparedStatement ps2;

      String query2="UPDATE `products` SET `ProductQuantity`=`ProductQuantity`-? WHERE `ProductID`=?";
         
     ps2=MyConnection.getConnection().prepareStatement(query2);
      
      
      s=Integer.parseInt(OrderTable.getValueAt(y, 2).toString());
      z=Integer.parseInt(OrderTable.getValueAt(y, 0).toString());
      
       ps2.setInt(1, s);
     ps2.setInt(2,z);
     ps2.executeUpdate();
     
  } 

            // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(AddOrder.class.getName()).log(Level.SEVERE, null, ex);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_ConfirmOrderActionPerformed

    private void PrintRecieptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintRecieptActionPerformed

        MessageFormat header=new MessageFormat("Reciept");

        MessageFormat footer=new MessageFormat("Page {0, number, integer}");
        MessageFormat header1=new MessageFormat("Customer Information");
        MessageFormat footer2=new MessageFormat("");
        try
        {
           jTable3.print(JTable.PrintMode.NORMAL, header1, footer2);
            OrderTable.print(JTable.PrintMode.NORMAL, header, footer);

        }catch(PrinterException ex)
        {
            System.err.format("Cannot print %s%n", ex.getMessage());
        }

    }//GEN-LAST:event_PrintRecieptActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        this.dispose();
        Orders o=new Orders();
        o.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
String ID;
    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked

        PreparedStatement ps;
         ResultSet rs;
         try{
             
             int row=jTable2.getSelectedRow();
             String tableClicked=(jTable2.getModel().getValueAt(row, 0).toString());
             String query="SELECT `CustomerID`, `CustomerName`, `Email` FROM `customer` WHERE `CustomerID` =?";
              ps=MyConnection.getConnection().prepareStatement(query);
              ps.setString(1, tableClicked);
              rs=ps.executeQuery();
              
              if(rs.next())
              {
                   ID=rs.getString("CustomerID");
              }
              CutomerIDTextfield.setText(ID);
               
             
         }
         catch(Exception e){JOptionPane.showMessageDialog(null, e);}







// TODO add your handling code here:
    }//GEN-LAST:event_jTable2MouseClicked
String TotalQuantity;
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

         PreparedStatement ps;
         ResultSet rs;
         try{
             
             int row=jTable1.getSelectedRow();
             String tableClicked=(jTable1.getModel().getValueAt(row, 0).toString());
             String query="SELECT  `ProductQuantity` FROM `products` WHERE `ProductID` =?";
              ps=MyConnection.getConnection().prepareStatement(query);
              ps.setString(1, tableClicked);
              rs=ps.executeQuery();
              
              if(rs.next())
              {
                   TotalQuantity=rs.getString("ProductQuantity");
              }
              //jLabel3.setText(TotalQuantity);
               
             
         }
         catch(Exception e){JOptionPane.showMessageDialog(null, e);}
        










// TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
String SearchedID=jTextField1.getText();
       if(SearchedID.equals("") )
       {
            JOptionPane.showMessageDialog(null, "Please enter values in the missing field");
            return;
       }
     PreparedStatement ps;
      ResultSet rs; 
        try {
            String query="SELECT * FROM `products` WHERE `ProductName`=?";
            ps=MyConnection.getConnection().prepareStatement(query);
            ps.setString(1, SearchedID);
            
             rs=ps.executeQuery();
            DefaultTableModel tm=(DefaultTableModel)jTable1.getModel();
            tm.setRowCount(0);
            
            while(rs.next())
            {
                Object o[]={rs.getInt("ProductID"), rs.getString("ProductName"), rs.getInt("ProductQuantity"), rs.getString("ProductPrice"), rs.getInt("ProductCategory"), rs.getString("ProductDescription")};
                tm.addRow(o);
                
            }
           

            
            
            
        } catch (SQLException ex) {
            Logger.getLogger(SearchCustomer.class.getName()).log(Level.SEVERE, null, ex);
        }     // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        this.dispose();
        Home h=new Home();
        h.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clear;
    private javax.swing.JButton ConfirmOrder;
    private javax.swing.JTextField CutomerIDTextfield;
    public javax.swing.JTable OrderTable;
    private javax.swing.JButton PrintReciept;
    private javax.swing.JButton RemoveSelectedRows;
    private javax.swing.JButton SelectIDButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton total;
    public javax.swing.JTextField totalTextfield;
    // End of variables declaration//GEN-END:variables
}
